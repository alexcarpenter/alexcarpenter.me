@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: "Geist Sans";
  src: url("/fonts/GeistVariableVF.woff2") format("woff2");
  font-display: swap;
  font-weight: 400 600;
}

@font-face {
  font-family: "Geist Mono";
  src: url("/fonts/GeistMonoVariableVF.woff2") format("woff2");
  font-display: swap;
  font-weight: 400;
}

@layer base {
  :root {
    --page-primary: theme(colors.white);
    --surface: theme(colors.neutral.100);
    --text-color-primary: theme(colors.neutral.700);
    --text-color-secondary: theme(colors.neutral.500);
    --text-color-subtle: theme(colors.neutral.300);
    --border-color-primary: theme(colors.neutral.200);
    --decoration-color-subtle: theme(colors.neutral.300);
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --page-primary: theme(colors.neutral.900);
      --surface: theme(colors.neutral.800);
      --text-color-primary: theme(colors.neutral.100);
      --text-color-secondary: theme(colors.neutral.400);
      --text-color-subtle: theme(colors.neutral.500);
      --border-color-primary: theme(colors.neutral.700);
      --decoration-color-subtle: theme(colors.neutral.500);
    }
  }

  html {
    font-size: 0.875rem;
  }
}

@layer components {
  .prose {
    :where(* + *) {
      @apply mt-4;
    }

    :where(h2, h3) {
      @apply font-semibold scroll-mt-4;
    }

    :where(* + h2, * + h3, * + details),
    :where(* + p:has(img)),
    :where(p:has(img) + *),
    :where(* + p:has(small)) {
      @apply mt-8;
    }

    :where(p:has(small) ~ h2) {
      @apply mt-1;
    }

    :where(a) {
      @apply underline decoration-[var(--decoration-color-subtle)] hover:decoration-green-500 decoration-[0.1071428571rem];
    }

    :where(strong) {
      @apply font-semibold;
    }

    :where(ul) {
      @apply pl-6 space-y-0.5 list-square marker:text-[var(--text-color-subtle)];
    }

    :where(ul li ul) {
      @apply mt-0.5;
    }

    :where(code),
    :where(kbd) {
      @apply bg-neutral-100 dark:bg-neutral-800 py-px px-1 rounded;
    }

    :where(pre) {
      @apply !bg-neutral-100 dark:!bg-neutral-800 text-sm rounded p-4;
    }

    :where(dl) {
      @apply grid grid-cols-[max-content_minmax(0,1fr)];
    }

    :where(dt) {
      @apply m-0 pr-8 py-2 [&:not(:first-of-type)]:border-t [&:not(:first-of-type)]:border-primary [&:not(:first-of-type)]:border-dashed text-secondary;
    }

    :where(dd) {
      @apply m-0 py-2 col-start-2 [&:not(:first-of-type)]:border-t [&:not(:first-of-type)]:border-primary [&:not(:first-of-type)]:border-dashed;
    }

    :where(dt:first-of-type),
    :where(dd:first-of-type) {
      @apply pt-0;
    }

    :where(dt:last-of-type),
    :where(dd:last-of-type) {
      @apply pb-0;
    }

    :where(blockquote) {
      @apply border-l-[0.1875rem] border-[var(--text-color-subtle)] pl-5 ml-3;
    }

    :where(table) {
      @apply w-full;
    }

    :where(tr:not(:last-child) > td) {
      @apply pb-2;
    }

    :where(th) {
      @apply pb-2 font-semibold;
    }

    :where(th:not([align="right"])) {
      @apply text-left;
    }

    :where(td) {
      @apply pt-2 border-t border-dashed border-primary align-top;
    }

    :where(tr:first-of-type td) {
      @apply border-solid;
    }

    :where(td + td),
    :where(th + th) {
      @apply pl-2;
    }

    :where(td[align="right"]) {
      @apply font-mono text-secondary text-nowrap;
    }

    :where(small) {
      @apply text-neutral-500 text-xs uppercase font-mono px-1 py-px rounded tracking-wider bg-neutral-100 border border-transparent dark:bg-neutral-800 dark:text-neutral-400 -translate-y-px;
    }

    :where(hr) {
      @apply my-8 border-primary border-dashed;
    }

    :where(.contains-task-list) {
      @apply list-none pl-1.5;
    }

    :where(summary) {
      @apply font-semibold cursor-pointer;
    }
  }
}
