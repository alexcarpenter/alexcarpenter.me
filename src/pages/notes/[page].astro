---
import { getCollection, render } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";
import ExternalLink from "@/components/ExternalLink.astro";
import Preview from "@/components/Preview.astro";
import Button from "@/components/Button.astro";

export async function getStaticPaths({ paginate }) {
  const notes = await getCollection("notes");

  const sortedNotes = notes.sort(
    (a, b) =>
      Date.parse(b.data.published.toString()) -
      Date.parse(a.data.published.toString()),
  );

  return paginate(sortedNotes, { pageSize: 20 });
}

const { page } = Astro.props as { page: any };

const renderedNotes = await Promise.all(
  page.data.map(async (note) => {
    const { Content } = await render(note);
    return { note, Content };
  }),
);
---

<BaseLayout title="Notes">
  <header class="container mt-4">
    <span
      class="block max-w-[40ch] text-2xl leading-tight font-medium tracking-tight"
      ><h1 class="inline">Notes</h1>
      <span class="text-muted-foreground"
        >on engineering, developer experience, design systems, and
        accessibility.</span
      ></span
    >
  </header>

  <section class="container mt-16">
    <ul>
      {
        renderedNotes.map(({ note, Content }) => (
          <li class="not-first:border-separator not-first:mt-16 not-first:border-t not-first:pt-16">
            <article>
              <a
                href={`/notes/${note.id}`}
                class="text-muted-foreground inline-block font-medium"
              >
                <time datetime={note.data.published.toISOString()}>
                  {new Date(note.data.published).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "short",
                    day: "2-digit",
                    weekday: "short",
                  })}
                </time>
              </a>
              {note.data.title ? (
                <header class="mt-4">
                  <h1 class="font-medium">
                    {note.data.link ? (
                      <ExternalLink
                        href={note.data.link}
                        text={note.data.title}
                      />
                    ) : (
                      note.data.title
                    )}
                  </h1>
                  {note.data.link ? (
                    <p class="text-muted-foreground">
                      {new URL(note.data.link).hostname}
                    </p>
                  ) : null}
                </header>
              ) : null}
              {note.data.demo ? (
                <Preview
                  class="mt-4"
                  src={note.data.demo}
                  title={note.data.title}
                />
              ) : null}
              {note.body ? (
                <div class="prose mt-4 text-pretty">
                  <Content />
                </div>
              ) : note.data.description ? (
                <div class="prose mt-4 text-pretty">
                  <blockquote>{note.data.description}</blockquote>
                </div>
              ) : null}
            </article>
          </li>
        ))
      }
    </ul>

    <nav
      class="mt-16 flex items-center justify-between"
      aria-label="Pagination"
    >
      {
        page.url.prev ? (
          <Button
            as="a"
            href={page.url.prev}
            size="icon"
            aria-label="Previous page"
          >
            <Icon name="arrow-left" aria-hidden="true" />
          </Button>
        ) : (
          <Button
            as="span"
            size="icon"
            class="cursor-not-allowed opacity-50"
            aria-hidden="true"
          >
            <Icon name="arrow-left" aria-hidden="true" />
          </Button>
        )
      }

      <div
        class="text-muted-foreground flex items-center justify-center gap-x-2 text-sm"
      >
        <span>
          Page {page.currentPage} of {page.lastPage}
        </span>
        <span class="max-sm:hidden">
          ({page.start + 1}-{page.end + 1} of {page.total} notes)
        </span>
      </div>

      {
        page.url.next ? (
          <Button
            as="a"
            size="icon"
            href={page.url.next}
            aria-label="Next page"
          >
            <Icon name="arrow-right" aria-hidden="true" />
          </Button>
        ) : (
          <Button
            as="span"
            size="icon"
            class="cursor-not-allowed opacity-50"
            aria-hidden="true"
          >
            <Icon name="arrow-right" aria-hidden="true" />
          </Button>
        )
      }
    </nav>
  </section>
</BaseLayout>
