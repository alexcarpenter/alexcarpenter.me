---
import { getCollection, render } from "astro:content";
import type { Page } from "astro";
import type { CollectionEntry } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import ExternalLink from "@/components/ExternalLink.astro";
import Pagination from "@/components/Pagination.astro";

const entries = await getCollection("journal");
const sortedEntries = entries.sort(
  (a, b) =>
    Date.parse(b.data.published.toString()) -
    Date.parse(a.data.published.toString()),
);

const pageSize = 20;
const firstPageEntries = sortedEntries.slice(0, pageSize);
const totalPages = Math.ceil(sortedEntries.length / pageSize);

const page = {
  currentPage: 1,
  lastPage: totalPages,
  start: 0,
  end: Math.min(pageSize, sortedEntries.length) - 1,
  total: sortedEntries.length,
  data: firstPageEntries,
  size: pageSize,
  url: {
    current: "/journal",
    next: totalPages > 1 ? "/journal/2" : undefined,
    prev: undefined,
    first: "/journal",
    last: `/journal/${totalPages}`,
  },
} satisfies Page<CollectionEntry<"journal">>;

const renderedEntries = await Promise.all(
  firstPageEntries.map(async (entry) => {
    const { Content } = await render(entry);
    return { entry, Content };
  }),
);
---

<BaseLayout title="Journal">
  <header class="container mt-4">
    <span
      class="block max-w-[40ch] text-2xl leading-tight font-medium tracking-tight"
      ><h1 class="inline">Journaling</h1>
      <span class="text-muted-foreground"
        >about gear, tools, and everyday life.</span
      ></span
    >
  </header>

  <section class="container mt-16">
    <ul>
      {
        renderedEntries.map(({ entry, Content }) => (
          <li class="not-first:border-separator not-first:mt-16 not-first:border-t not-first:pt-16">
            <article>
              <a
                href={`/journal/${entry.id}`}
                class="text-muted-foreground inline-block font-medium"
              >
                <time datetime={entry.data.published.toISOString()}>
                  {new Date(entry.data.published).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "short",
                    day: "2-digit",
                    weekday: "short",
                  })}
                </time>
              </a>
              {entry.data.title ? (
                <header class="mt-4">
                  <h1 class="font-medium">
                    {entry.data.link ? (
                      <ExternalLink
                        href={entry.data.link}
                        text={entry.data.title}
                      />
                    ) : (
                      entry.data.title
                    )}
                  </h1>
                  {entry.data.link ? (
                    <p class="text-muted-foreground">
                      {new URL(entry.data.link).hostname}
                    </p>
                  ) : null}
                </header>
              ) : null}
              {entry.body ? (
                <div class="prose mt-4 text-pretty">
                  <Content />
                </div>
              ) : entry.data.description ? (
                <div class="prose mt-4 text-pretty">
                  <blockquote>{entry.data.description}</blockquote>
                </div>
              ) : null}
            </article>
          </li>
        ))
      }
    </ul>

    <Pagination page={page} class="mt-16" collection="journal" />
  </section>
</BaseLayout>
