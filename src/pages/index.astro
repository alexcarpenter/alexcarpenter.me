---
import { highlight } from "sugar-high";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { slugify } from "@/utils/formatting";

const code = `import * as SignIn from '@clerk/elements/sign-in'

export default function SignInPage() {
  return (
    <SignIn.Root>
      <SignIn.Step name="start">
        <h1>Sign in to your account</h1>
      </SignIn.Step>
    </SignIn.Root>
  )
}`;
const codeHTML = highlight(code);
---

<BaseLayout>
  <header
    class="relative text-center py-10 sm:py-20 px-4 sm:px-8 border-b border-neutral-700"
  >
    <p
      class="hidden md:flex pl-4 absolute left-0 justify-center inset-y-8 -translate-x-full items-center [writing-mode:vertical-lr] rotate-180"
    >
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
      <span
        class="relative w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span
        class="py-4 font-mono uppercase text-neutral-700 text-xxs leading-none"
        >Intro</span
      >
      <span
        class="w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
    </p>
    <h1 class="sr-only">Alex Carpenter</h1>
    <p class="font-medium text-xl sm:text-2xl text-balance tracking-tight">
      User Interface Engineer who enjoys working at the intersection of design
      and engineering teams.
    </p>
  </header>

  <section class="relative border-b border-neutral-700">
    <p
      class="hidden md:flex pl-4 absolute left-0 justify-center inset-y-8 -translate-x-full items-center [writing-mode:vertical-lr] rotate-180"
    >
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
      <span
        class="relative w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span
        class="py-4 font-mono uppercase text-neutral-700 text-xxs leading-none"
        >Currently</span
      >
      <span
        class="w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
    </p>
    <header class="relative p-4 sm:p-8">
      <p class="text-balance font-medium">
        Currently I am a part of the design team at <a
          href="https://clerk.com"
          class="underline decoration-2 decoration-neutral-600 hover:decoration-white"
          >Clerk</a
        > where I am working on rebuilding our <a
          href="https://clerk.com/docs/components/overview"
          class="underline decoration-2 decoration-neutral-600 hover:decoration-white"
          >UI Components</a
        > and <a
          href="https://clerk.com/docs/elements/overview"
          class="underline decoration-2 decoration-neutral-600 hover:decoration-white"
          >Elements</a
        >.
      </p>
    </header>
    <div
      class="border-y border-neutral-700 border-dashed grid grid-cols-1 sm:grid-cols-2 auto-rows-fr"
    >
      <div class="sm:border-r border-dashed border-neutral-700">
        <pre
          class="py-4 text-sm leading-6 overflow-auto overscroll-x-contain"><code class:list={["isolate block w-fit min-w-full [counter-reset:line] *:inline-block *:w-full *:[counter-increment:line]",
              "*:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:w-11 *:before:select-none *:before:bg-gradient-to-r *:before:from-neutral-950 *:before:from-80% *:before:pr-4 *:before:text-right *:before:text-neutral-400 *:before:content-[counter(line)]",
              "*:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-6 *:after:select-none *:after:bg-gradient-to-l *:after:from-neutral-950 *:after:from-35% *:after:content-['_']"
            ]}><Fragment set:html={codeHTML} /></code></pre>
      </div>

      <div class="relative px-8 pt-8 flex overflow-hidden bg-neutral-900">
        <!-- <div
          class="absolute inset-0 bg-stripes bg-stripes-neutral-700 opacity-75"
          aria-hidden="true"
        >
        </div> -->
      </div>
    </div>
    <div class="p-4 sm:p-8 text-center">
      <p class="text-xs font-mono uppercase text-neutral-400">
        In collaboration with
      </p>
      <div class="flex justify-center mt-4">
        {
          [
            {
              name: "Joe Bell",
              img: "/img/joe-bell.jpeg",
              linkedin: "https://www.linkedin.com/in/joebell93/",
            },
            {
              name: "Bryce Kalow",
              img: "/img/bryce-kalow.jpeg",
              linkedin: "https://www.linkedin.com/in/bryce-kalow-86a57183/",
            },
            {
              name: "Tom Milewski",
              img: "/img/tom-milewski.jpeg",
              linkedin: "https://www.linkedin.com/in/tmilewski/",
            },
            {
              name: "Dylan Staley",
              img: "/img/dylan-staley.jpeg",
              linkedin: "https://www.linkedin.com/in/dstaley/",
            },
          ].map(({ name, img, linkedin }) => {
            const id = slugify(`tooltip-${name}`);
            return (
              <Fragment>
                <a
                  href={linkedin}
                  data-tooltip-trigger={id}
                  class="relative size-8 rounded-full -ml-0.5 ring-4 ring-neutral-950 grayscale hover:grayscale-0 overflow-hidden"
                  aria-describedby={id}
                >
                  <img src={img} alt={`${name} avatar`} />
                </a>
                <div
                  id={id}
                  role="tooltip"
                  class="bg-neutral-800 px-2 py-1 rounded-md text-xs font-mono w-max absolute top-0 left-0 hidden"
                >
                  {name}
                </div>
              </Fragment>
            );
          })
        }
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  import { computePosition, flip, shift, offset } from "@floating-ui/dom";

  const triggers = document.querySelectorAll(
    "[data-tooltip-trigger]"
  ) as NodeListOf<HTMLElement>;

  triggers.forEach((trigger) => {
    const content = document.getElementById(
      `${trigger.dataset.tooltipTrigger}`
    ) as HTMLElement;
    function update() {
      computePosition(trigger, content, {
        placement: "top",
        middleware: [
          offset(8),
          flip(),
          shift({
            padding: 16,
          }),
        ],
      }).then(({ x, y }) => {
        Object.assign(content.style, {
          left: `${x}px`,
          top: `${y}px`,
        });
      });
    }

    function show() {
      content.style.display = "block";
      update();
    }

    function hide() {
      content.style.display = "";
    }

    [
      ["mouseenter", show],
      ["mouseleave", hide],
      ["focus", show],
      ["blur", hide],
      [
        "keydown",
        (e: KeyboardEvent) => {
          if (e.key === "Escape") {
            hide();
          }
        },
      ],
    ].forEach(([event, listener]) => {
      trigger.addEventListener(
        event as keyof HTMLElementEventMap,
        listener as EventListenerOrEventListenerObject
      );
    });
  });
</script>
