---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
type JobProps = CollectionEntry<"jobs">;
const jobs = await getCollection("jobs");
type RecommendationProps = CollectionEntry<"recommendations">;
const recommendations = await getCollection("recommendations");
import { parseYearToString } from "@/components/FormattedDate.astro";
import { slugify } from "@/utils/formatting";
import SectionLabel from "@/components/SectionLabel.astro";
---

<BaseLayout
  title="Resume"
  description="UI engineer who enjoys working at the intersection of design and engineering teams."
>
  <header
    class="relative text-center py-12 sm:py-16 px-4 sm:px-8 border-b border-neutral-700"
  >
    <SectionLabel as="p">Intro</SectionLabel>
    <h1 class="text-sm text-neutral-400 font-mono">Resume</h1>
    <p class="mt-2 font-medium text-xl sm:text-2xl text-balance tracking-tight">
      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Blanditiis,
      magnam!
    </p>
  </header>

  <section id="experience" class="relative">
    <SectionLabel>Experience</SectionLabel>
    <ul class="divide-y divide-neutral-700 divide-dashed">
      {
        jobs
          .sort(
            (a, b) =>
              Date.parse(b.data.startDate.toString()) -
              Date.parse(a.data.startDate.toString())
          )
          .map((job: JobProps) =>
            job.render().then(({ Content }) => (
              <li class="py-8 px-4 sm:px-8 grid sm:grid-cols-[2rem,minmax(0,1fr)] gap-4">
                <img
                  src={`/logos/${slugify(job.data.company)}.svg`}
                  alt=""
                  class="relative size-8 rounded-full"
                />
                <div>
                  <h3 class="sm:mt-1 font-medium">
                    {job.data.title} at {job.data.company}
                  </h3>
                  <p class="mt-0.5 mb-4 text-sm text-neutral-400 font-mono">
                    {`${parseYearToString(job.data.startDate)}â€“${
                      job.data.endDate
                        ? parseYearToString(job.data.endDate)
                        : "Now"
                    }`}
                  </p>
                  <Content />
                </div>
              </li>
            ))
          )
      }
    </ul>
  </section>

  <div
    class="w-full h-6 opacity-75 [background-image:linear-gradient(45deg,theme(colors.neutral.700)_12.50%,transparent_12.50%,transparent_50%,theme(colors.neutral.700)_50%,theme(colors.neutral.700)_62.50%,transparent_62.50%,transparent_100%)] [background-size:4px_4px] border-y border-neutral-700"
    aria-hidden="true"
  >
  </div>

  <section id="recommendations" class="relative">
    <SectionLabel>Recommendations</SectionLabel>
    <ul class="divide-y divide-neutral-700 divide-dashed">
      {
        recommendations
          .sort(
            (a, b) =>
              Date.parse(b.data.published.toString()) -
              Date.parse(a.data.published.toString())
          )
          .filter(
            (recommendation: RecommendationProps) =>
              recommendation.data.visible !== false
          )
          .map((recommendation: RecommendationProps) =>
            recommendation.render().then(({ Content }) => {
              const { name, title, company } = recommendation.data;
              return (
                <li class="py-8 px-4 sm:px-8 grid sm:grid-cols-[2rem,minmax(0,1fr)] gap-4">
                  <img
                    src={`/img/${slugify(name)}.jpeg`}
                    alt=""
                    class="relative size-8 rounded-full"
                  />
                  <div>
                    <h3 class="sm:mt-1 font-medium">{name}</h3>
                    <p class="mt-0.5 mb-4 text-sm text-neutral-400 font-mono">
                      {title} at {company}
                    </p>
                    <Content />
                  </div>
                </li>
              );
            })
          )
      }
    </ul>
  </section>
</BaseLayout>
