---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
const allLinks = await getCollection("links");
const allNotes = await getCollection("notes", ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});
const allFeed = [...allLinks, ...allNotes].sort((a, b) => {
  const aDate = a.data.published;
  const bDate = b.data.published;
  return Date.parse(bDate.toString()) - Date.parse(aDate.toString());
});
---

<BaseLayout>
  <header class="relative text-center py-20 px-8 border-b border-neutral-700">
    <p
      class="hidden pl-4 absolute left-0 justify-center inset-y-8 -translate-x-full md:flex items-center [writing-mode:vertical-lr] rotate-180"
    >
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
      <span
        class="relative w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span
        class="py-4 font-mono uppercase text-neutral-700 text-xxs leading-none"
        >Intro</span
      >
      <span
        class="w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
    </p>
    <h1 class="font-medium text-2xl text-balance tracking-tight">Feed</h1>
  </header>
  <section class="relative">
    <p
      class="hidden pl-4 absolute left-0 justify-center inset-y-8 -translate-x-full md:flex items-center [writing-mode:vertical-lr] rotate-180"
    >
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
      <span
        class="relative w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span
        class="py-4 font-mono uppercase text-neutral-700 text-xxs leading-none"
        >Timeline</span
      >
      <span
        class="w-px h-full flex-1 border-l border-neutral-800 border-dashed"
        aria-hidden="true"></span>
      <span class="w-2 h-px bg-neutral-800" aria-hidden="true"></span>
    </p>
    <ul class="divide-y divide-dashed divide-neutral-700">
      {
        allFeed.map((item) => {
          if (item.collection === "links") {
            return item.render().then(({ Content }) => (
              <li class="p-8">
                <h2 class="font-semibold">
                  <a
                    href={item.data.link}
                    class="group underline decoration-2 decoration-neutral-600 hover:decoration-white"
                  >
                    {item.data.title}
                    <span class="bg-neutral-800 rounded-sm absolute shrink-0 p-0.5 ml-1 text-neutral-400 mt-px group-hover:text-current">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="size-2.5"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      >
                        <>
                          <line x1="7" y1="17" x2="17" y2="7" />
                          <polyline points="7 7 17 7 17 17" />
                        </>
                      </svg>
                    </span>
                  </a>
                </h2>
                <p class="text-sm font-mono text-neutral-400">
                  {new URL(item.data.link).hostname}
                </p>
                {item.body && (
                  <div class="mt-4 prose">
                    <Content />
                  </div>
                )}
              </li>
            ));
          }
          return item.render().then(({ Content }) => (
            <li class="p-8">
              {item.body && (
                <div class="prose">
                  <Content />
                </div>
              )}
            </li>
          ));
        })
      }
    </ul>
  </section>
</BaseLayout>
