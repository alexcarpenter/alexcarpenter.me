---
import { type CollectionEntry, getCollection } from "astro:content";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
dayjs.extend(utc);
import BaseLayout from "@/layouts/BaseLayout.astro";
import TableOfContents from "@/components/TableOfContents.astro";
export async function getStaticPaths() {
  const posts = await getCollection("posts", ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"posts">;
const post = Astro.props;
const { headings, Content } = await post.render();
const date = post.data.updated ?? post.data.published;
const lastModified = dayjs(date).utc().format("HH:mm:ss DD MMMM YYYY UTC");
---

<BaseLayout title={post.data.title} description={post.data.description}>
  <header class="pb-8 pt-40 border-b border-primary">
    <h1 class="font-semibold">{post.data.title}</h1>
    <p class="mt-0.5 text-secondary">{post.data.description}</p>
  </header>
  {
    post.data.toc ? (
      <section class="pt-8 pb-16 relative grid sm:grid-cols-3 items-start gap-x-8 gap-y-8">
        <p class="text-secondary sm:col-span-3">
          Last modified{" "}
          <time datetime={date.toISOString()}>{lastModified}</time>
        </p>
        <TableOfContents headings={headings} />
        <article class="sm:col-span-2 prose">
          <Content />
        </article>
      </section>
    ) : (
      <section class="pt-8 pb-16">
        <p class="text-secondary mb-8">
          Last modified{" "}
          <time datetime={date.toISOString()}>{lastModified}</time>
        </p>
        <article class="prose">
          <Content />
        </article>
      </section>
    )
  }
</BaseLayout>
