---
import { getCollection, render } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import ExternalLink from "@/components/ExternalLink.astro";
import { Icon } from "astro-icon/components";
import { GEAR_CATEGORY_MAP } from "@/consts.ts";

export async function getStaticPaths() {
  const gear = await getCollection("gear");
  return Object.entries(GEAR_CATEGORY_MAP).map(
    ([category, { title, description, slug }]) => ({
      params: { slug },
      props: {
        category,
        title,
        description,
        items: gear.filter((item) => item.data.category === category),
      },
    })
  );
}

const page = Astro.props;
const { title, description, category, items } = page;
---

<BaseLayout title={title}>
  <article class="mt-4 container">
    <header class="mt-4">
      <h1
        class="text-2xl font-medium tracking-tight max-w-[40ch] leading-tight"
      >
        {title}
      </h1>
      <p class="text-foreground-muted mt-4 font-medium">{description}</p>
    </header>
  </article>
  {
    items.length > 0 ? (
      <section class="mt-16 container scroll-mt-16" id={category}>
        <ul class="grid grid-cols-1 sm:grid-cols-2 gap-8">
          {items.map((item) => {
            return (
              <li>
                <article>
                  <p class="mb-1 font-mono text-xs tracking-widest uppercase text-foreground-muted flex gap-x-1.5">
                    {item.data.favorite ? (
                      <span class="flex items-center h-[1lh]">
                        <Icon
                          name="star"
                          class="text-amber-500 dark:text-amber-400 size-[1em]"
                          title="Favorite"
                        />
                      </span>
                    ) : null}
                    {item.data.eyebrow}
                  </p>
                  <h3 class="font-medium tracking-tight">
                    {item.data.link ? (
                      <ExternalLink
                        href={item.data.link}
                        class="text-foreground-muted hover:text-foreground transition"
                        text={item.data.name}
                      />
                    ) : (
                      item.data.name
                    )}
                  </h3>
                  {item.data.link ? (
                    <p class="text-foreground-muted">
                      {new URL(item.data.link).hostname}
                    </p>
                  ) : null}
                </article>
              </li>
            );
          })}
        </ul>
      </section>
    ) : null
  }

  <footer class="container mt-16">
    <a
      href="/gear"
      class="text-foreground-muted inline-flex gap-x-1 items-center"
    >
      <Icon name="arrow-left" aria-hidden="true" />Back to all gear</a
    >
  </footer>
</BaseLayout>
