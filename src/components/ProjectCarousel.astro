---
import { Image } from "astro:assets";
interface Props {
  projects: Array<{
    img: {
      src: string;
      alt: string;
    };
    title: string;
    href: string;
  }>;
}
const { projects } = Astro.props;
const renderCarousel = projects.length > 4;
---

<div
  class:list={{
    embla: renderCarousel,
  }}
>
  <div class:list={[{ "overflow-hidden embla__viewport": renderCarousel }]}>
    <div
      class:list={[
        "flex -ml-2",
        {
          embla__container: renderCarousel,
        },
      ]}
    >
      {
        projects.map(({ img, href, title }) => {
          return (
            <div
              class:list={[
                "min-w-0 flex-[0_0_25%] pl-2",
                { embla__slide: renderCarousel },
              ]}
            >
              <a
                href={href}
                class="relative grid aspect-[3/2] overflow-hidden border border-subtle"
              >
                <span class="sr-only">{title}</span>
                <Image
                  {...img}
                  width="960"
                  height="640"
                  class="absolute w-full h-full object-cover"
                />
              </a>
            </div>
          );
        })
      }
    </div>
  </div>
  {
    renderCarousel ? (
      <div class="embla__progress relative mt-2 h-1 overflow-hidden bg-neutral-100  dark:bg-neutral-800">
        <div
          class="embla__progress__bar absolute top-0 bottom-0 w-full -left-full bg-neutral-500 dark:bg-neutral-400 "
          style="transform:translate3d(0%,0px,0px)"
        />
      </div>
    ) : null
  }
</div>

<script>
  import { options, setupProgressBar } from "@/utils/embla";
  import EmblaCarousel from "embla-carousel";
  const rootNodes = document.querySelectorAll(".embla");
  rootNodes.forEach((rootNode) => {
    const viewportNode = rootNode?.querySelector(
      ".embla__viewport"
    ) as HTMLElement;
    const progressNode = rootNode?.querySelector(
      ".embla__progress__bar"
    ) as HTMLElement;
    const emblaApi = EmblaCarousel(viewportNode, options);
    const { applyProgress, removeProgress } = setupProgressBar(
      emblaApi,
      progressNode
    );
    emblaApi
      .on("init", applyProgress)
      .on("reInit", applyProgress)
      .on("scroll", applyProgress)
      .on("destroy", removeProgress);
  });
</script>
