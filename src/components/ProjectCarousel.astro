---
import { Image } from "astro:assets";
interface Props {
  projects: Array<{
    img: {
      src: string;
      alt: string;
    };
    title: string;
    href: string;
  }>;
}
const { projects } = Astro.props;
---

<div class="embla relative">
  <div
    class="pointer-events-none absolute inset-y-0 w-[20%] bg-gradient-to-l left-full from-white dark:from-neutral-950 to-transparent z-10"
    aria-hidden="true"
  >
  </div>
  <div
    class="pointer-events-none absolute inset-y-0 w-[20%] bg-gradient-to-r right-full from-white dark:from-neutral-950 to-transparent z-10"
    aria-hidden="true"
  >
  </div>
  <div class="embla__viewport [clip-path:inset(0%_-20%_0%_-20%)]">
    <div class="flex -ml-2 embla__container">
      {
        projects.map(({ img, href, title }) => {
          return (
            <div class="min-w-0 flex-[0_0_50%] sm:flex-[0_0_33.33%] pl-2 embla__slide">
              <a
                href={href}
                class="relative grid aspect-[3/2] overflow-hidden border border-subtle group"
                target="_blank"
                rel="noreferrer"
              >
                <span class="sr-only">{title}</span>
                <Image
                  {...img}
                  width="960"
                  height="640"
                  class="absolute w-full h-full object-cover"
                />
                <span class="absolute bottom-2 right-2 bg-primary size-8 grid place-content-center sm:opacity-0 group-hover:opacity-100 transition-opacity group-focus-visible:opacity-100">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 39.24 32.26"
                    class="size-3 fill-current -rotate-45"
                    aria-hidden="true"
                  >
                    <path d="M29.1,18.43l-6.19.44H0V13.39H23.91l6.26.44L15.84,0h7.63L39.24,15.84v.58L23.47,32.26H15.84Z" />
                  </svg>
                </span>
              </a>
            </div>
          );
        })
      }
    </div>
    <div class="mt-4 flex gap-3">
      <button
        class="embla__prev border size-8 text-primary grid place-content-center opacity-0"
        ><span class="sr-only">Prev</span><svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 39.24 32.26"
          class="size-3 fill-current rotate-180"
        >
          <path
            d="M29.1,18.43l-6.19.44H0V13.39H23.91l6.26.44L15.84,0h7.63L39.24,15.84v.58L23.47,32.26H15.84Z"
          ></path>
        </svg></button
      >
      <button
        class="embla__next border size-8 text-primary grid place-content-center opacity-0"
        ><span class="sr-only">Next</span><svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 39.24 32.26"
          class="size-3 fill-current"
        >
          <path
            d="M29.1,18.43l-6.19.44H0V13.39H23.91l6.26.44L15.84,0h7.63L39.24,15.84v.58L23.47,32.26H15.84Z"
          ></path>
        </svg></button
      >
    </div>
  </div>
</div>

<script>
  import { options, addPrevNextBtnsClickHandlers } from "@/utils/embla";
  import EmblaCarousel from "embla-carousel";
  const rootNodes = document.querySelectorAll(".embla");
  rootNodes.forEach((rootNode) => {
    const viewportNode = rootNode?.querySelector(
      ".embla__viewport"
    ) as HTMLElement;
    const prevBtnNode = rootNode.querySelector(".embla__prev") as HTMLElement;
    const nextBtnNode = rootNode.querySelector(".embla__next") as HTMLElement;
    const emblaApi = EmblaCarousel(viewportNode, options);
    const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
      emblaApi,
      prevBtnNode,
      nextBtnNode
    );
    emblaApi.on("destroy", removePrevNextBtnsClickHandlers);
  });
</script>
