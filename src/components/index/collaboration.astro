---
import { slugify } from "@/utils/formatting";
---

<p class="text-xs font-mono uppercase text-neutral-400">
  In collaboration with
</p>
<div class="flex justify-center mt-4">
  {
    [
      {
        name: "Joe Bell",
        img: "/img/joe-bell.jpeg",
        linkedin: "https://www.linkedin.com/in/joebell93/",
      },
      {
        name: "Bryce Kalow",
        img: "/img/bryce-kalow.jpeg",
        linkedin: "https://www.linkedin.com/in/bryce-kalow-86a57183/",
      },
      {
        name: "Tom Milewski",
        img: "/img/tom-milewski.jpeg",
        linkedin: "https://www.linkedin.com/in/tmilewski/",
      },
      {
        name: "Dylan Staley",
        img: "/img/dylan-staley.jpeg",
        linkedin: "https://www.linkedin.com/in/dstaley/",
      },
    ].map(({ name, img, linkedin }) => {
      const id = slugify(`tooltip-${name}`);
      return (
        <Fragment>
          <a
            href={linkedin}
            data-tooltip-trigger={id}
            class="relative size-8 rounded-full -ml-0.5 ring-4 ring-neutral-950 grayscale hover:grayscale-0 overflow-hidden"
            aria-describedby={id}
          >
            <img
              src={img}
              alt={`${name} avatar`}
              class="w-full h-full absolute object-cover"
            />
          </a>
          <div
            id={id}
            role="tooltip"
            class="bg-neutral-800 px-2 py-1 rounded-md text-xs font-mono w-max absolute top-0 left-0 hidden"
          >
            {name}
          </div>
        </Fragment>
      );
    })
  }
</div>

<script>
  import { computePosition, flip, shift, offset } from "@floating-ui/dom";

  const triggers = document.querySelectorAll(
    "[data-tooltip-trigger]"
  ) as NodeListOf<HTMLElement>;

  triggers.forEach((trigger) => {
    const content = document.getElementById(
      `${trigger.dataset.tooltipTrigger}`
    ) as HTMLElement;
    function update() {
      computePosition(trigger, content, {
        placement: "top",
        middleware: [
          offset(8),
          flip(),
          shift({
            padding: 16,
          }),
        ],
      }).then(({ x, y }) => {
        Object.assign(content.style, {
          left: `${x}px`,
          top: `${y}px`,
        });
      });
    }

    function show() {
      content.style.display = "block";
      update();
    }

    function hide() {
      content.style.display = "";
    }

    [
      ["mouseenter", show],
      ["mouseleave", hide],
      ["focus", show],
      ["blur", hide],
      [
        "keydown",
        (e: KeyboardEvent) => {
          if (e.key === "Escape") {
            hide();
          }
        },
      ],
    ].forEach(([event, listener]) => {
      trigger.addEventListener(
        event as keyof HTMLElementEventMap,
        listener as EventListenerOrEventListenerObject
      );
    });
  });
</script>
